###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        14/May/2017  11:28:17
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\drivers\lcd_nhd-c0220biz.c
#    Command line =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\drivers\lcd_nhd-c0220biz.c
#        -D MPGL1 -D MPG1 -D EIE1 --preprocess=cl
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\ -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\lcd_nhd-c0220biz.lst
#    Object file  =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\Obj\lcd_nhd-c0220biz.o
#
###############################################################################

D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\drivers\lcd_nhd-c0220biz.c
      1          /***********************************************************************************************************************
      2          File: lcd_nhd-c0220biz.c.c                                                                
      3          
      4          Description:
      5          Driver for Newhaven Display NHD-C0220BiZ ASCII LCD.
      6          
      7          This application requires an I²C resource to output data.
      8          
      9          The displayable area of the screen is 20 characters x 2 lines, though the LCD RAM will accomodate
     10          40 characters per line (so can be used for scrolling text applications).
     11          Each character has a 1-byte address. Nmemonics are defined for the main locations
     12          
     13          Line #      Left most address             Last printed char           Right most address
     14            1       0x00 (LINE1_START_ADDR)       0x13 (LINE1_END_ADDR)       0x27 (LINE1_END_ABSOLUTE)      
     15            2       0x40 (LINE2_START_ADDR)       0x53 (LINE2_END_ADDR)       0x67 (LINE2_END_ABSOLUTE)      
     16          
     17          ------------------------------------------------------------------------------------------------------------------------
     18          API
     19          void LcdInitialize(void)
     20          Initializes the LCD task and manually sends a message to the LCD.
     21          This function must be run during the startup section of main.
     22          e.g.
     23          LcdInitialize();
     24          
     25          void LCDCommand(u8 u8Command_)
     26          Queues a command code to be sent to the LCD.  See the full command list in the header file.
     27          Some common commands are shown below.
     28          LCD_CLEAR_CMD				Writes spaces to all chars
     29          LCD_HOME_CMD				Puts cursor at 0x00
     30          
     31          LCD_DISPLAY_CMD			Root literal for managing display
     32          LCD_DISPLAY_ON				OR with LCD_DISPLAY_CMD to turn display on
     33          LCD_DISPLAY_CURSOR		OR with LCD_DISPLAY_CMD to turn cursor on
     34          LCD_DISPLAY_BLINK			OR with LCD_DISPLAY_CMD to turn cursor blink on
     35          
     36          e.g. Turn display on with a solid (non-blinking) cursor
     37          LCDCommand(LCD_DISPLAY_CMD | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR);
     38          
     39          void LCDMessage(u8 u8Address_, u8 *u8Message_)
     40          Sends a text message to the LCD to be printed at the address specified.  
     41          e.g. 
     42          u8 au8Message[] = "Hello world!";
     43          LCDMessage(LINE1_START_ADDR, au8Message);
     44          
     45          void LCDClearChars(u8 u8Address_, u8 u8CharactersToClear_)
     46          Clears a number of chars starting from the address specified.  This function does not span rows.
     47          e.g. Clear "world!" from the screen after the above example.
     48          LCDClearChars(LINE1_START_ADDR + 5, 6);
     49          
     50          ***********************************************************************************************************************/
     51          
     52          #include "configuration.h"
     53          
     54          /***********************************************************************************************************************
     55          Global variable definitions with scope across entire project.
     56          All Global variable names shall start with "G_<type>Lcd"
     57          ***********************************************************************************************************************/
     58          /* New variables */
     59          
     60          
     61          /*--------------------------------------------------------------------------------------------------------------------*/
     62          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     63          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     64          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     65          
     66          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     67          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     68          
     69          
     70          /***********************************************************************************************************************
     71          Global variable definitions with scope limited to this local application.
     72          Variable names shall start with "Lcd_" and be declared as static.
     73          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     74          static fnCode_type Lcd_StateMachine;
   \                     Lcd_StateMachine:
   \   00000000                      DS8 4
     75          

   \                                 In section .bss, align 4
     76          static u32 Lcd_u32Timer;
   \                     Lcd_u32Timer:
   \   00000000                      DS8 4
     77          
     78          
     79          /***********************************************************************************************************************
     80          * Function Definitions
     81          ***********************************************************************************************************************/
     82          
     83          /*--------------------------------------------------------------------------------------------------------------------*/
     84          /* Public Functions */
     85          /*--------------------------------------------------------------------------------------------------------------------*/
     86          
     87          /*----------------------------------------------------------------------------------------------------------------------
     88          Function LCDCommand
     89          
     90          Description:
     91          Queues a command char to be sent to the LCD using the TWI messaging function. 
     92          
     93          Requires:
     94          	- u8Command_ is an acceptable command value for the LCD as taken from the
     95              "LCD Commands" list in lcd_nhd_c0220biz.h header file.  The command must
     96              be complete and include any optional bits.
     97          
     98          Promises:
     99            - The command is queued and will be sent to the LCD at the next
    100              available time.
    101          */

   \                                 In section .text, align 2, keep-with-next
    102          void LCDCommand(u8 u8Command_)
    103          {
   \                     LCDCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    104            static u8 au8LCDWriteCommand[] = {LCD_CONTROL_COMMAND, 0x00};
    105          
    106            /* Update the command paramter into the command array */
    107            au8LCDWriteCommand[1] = u8Command_;
   \   00000004   0x....             LDR.N    R0,??DataTable4
   \   00000006   0x7044             STRB     R4,[R0, #+1]
    108              
    109            /* Queue the command to the I²C application */
    110            TWI0WriteData(LCD_ADDRESS, sizeof(au8LCDWriteCommand), &au8LCDWriteCommand[0], STOP);
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x....             LDR.N    R2,??DataTable4
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x203C             MOVS     R0,#+60
   \   00000010   0x.... 0x....      BL       TWI0WriteData
    111          
    112            /* Add a delay during initialization to let the command send properly */
    113            if(G_u32SystemFlags & _SYSTEM_INITIALIZING )
   \   00000014   0x....             LDR.N    R0,??DataTable4_1
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD505             BPL.N    ??LCDCommand_0
    114            {
    115              for(u32 i = 0; i < 100000; i++);
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??LCDCommand_1: (+1)
   \   0000001E   0x....             LDR.N    R1,??DataTable4_2  ;; 0x186a0
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD201             BCS.N    ??LCDCommand_0
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0xE7FA             B.N      ??LCDCommand_1
    116            }
    117            
    118          } /* end LCDCommand() */
   \                     ??LCDCommand_0: (+1)
   \   00000028   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 2
   \                     ??au8LCDWriteCommand:
   \   00000000                      DS8 2
    119          
    120          /*------------------------------------------------------------------------------
    121          Function: LCDMessage
    122          
    123          Description:
    124          Sends a text message to the LCD to be printed at the address specified.  
    125          
    126          Requires:
    127            - LCD is initialized
    128            - u8Message_ is a pointer to a NULL-terminated C-string
    129          	- The message to display is no more than (40 - the selected display location) 
    130              characters in length
    131            - Any characters not desired on screen that will not be overwritten need to 
    132              be erased first
    133          
    134          Promises:
    135            - Message to set cursor address in the LCD is queued, then message data 
    136              is queued to the LCD to be displayed. 
    137          */

   \                                 In section .text, align 2, keep-with-next
    138          void LCDMessage(u8 u8Address_, u8 *u8Message_)
    139          { 
   \                     LCDMessage: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    140            u8 u8Index; 
    141            static u8 au8LCDMessage[LCD_MESSAGE_OVERHEAD_SIZE + LCD_MAX_MESSAGE_SIZE] = 
    142                                     {LCD_CONTROL_DATA};
    143            
    144            /* Set the cursor to the correct address */
    145            LCDCommand(LCD_ADDRESS_CMD | u8Address_);
   \   00000006   0xF054 0x0080      ORRS     R0,R4,#0x80
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       LCDCommand
    146            
    147            /* Fill the message */
    148            u8Index = 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x0006             MOVS     R6,R0
    149            while(*u8Message_ != '\0')
   \                     ??LCDMessage_0: (+1)
   \   00000014   0x7828             LDRB     R0,[R5, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD006             BEQ.N    ??LCDMessage_1
    150            {
    151              au8LCDMessage[u8Index++] = *u8Message_++;
   \   0000001A   0x7828             LDRB     R0,[R5, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable4_3
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   0x5470             STRB     R0,[R6, R1]
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
   \   00000024   0x1C76             ADDS     R6,R6,#+1
   \   00000026   0xE7F5             B.N      ??LCDMessage_0
    152            }
    153              
    154            /* Queue the message */
    155            TWI0WriteData(LCD_ADDRESS, u8Index, au8LCDMessage, STOP);
   \                     ??LCDMessage_1: (+1)
   \   00000028   0x2300             MOVS     R3,#+0
   \   0000002A   0x....             LDR.N    R2,??DataTable4_3
   \   0000002C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002E   0x0031             MOVS     R1,R6
   \   00000030   0x203C             MOVS     R0,#+60
   \   00000032   0x.... 0x....      BL       TWI0WriteData
    156          
    157          } /* end LCDMessage() */
   \   00000036   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .data, align 4
   \                     ??au8LCDMessage:
   \   00000000   0x40 0x00          DC8 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    158          
    159          
    160          /*------------------------------------------------------------------------------
    161          Function: LCDClearChars
    162          
    163          Description:
    164          Clears a number of chars starting from the address specified.  This function is
    165          not meant to span rows.
    166          
    167          Requires:
    168            - LCD is initialized
    169            - u8Address_ is the starting address where the first character will be cleared
    170          	- u8CharactersToClear_ is the number of characters to clear and does not cause 
    171              the cursor to go past the available data RAM.
    172          
    173          Promises:
    174            - Message to set cursor address in the LCD is queued, then message data 
    175              consisting of all ' ' characters is queued to the LCD to be displayed. 
    176          */

   \                                 In section .text, align 2, keep-with-next
    177          void LCDClearChars(u8 u8Address_, u8 u8CharactersToClear_)
    178          { 
   \                     LCDClearChars: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    179            u8 u8Index; 
    180            static u8 au8LCDMessage[LCD_MESSAGE_OVERHEAD_SIZE + LCD_MAX_MESSAGE_SIZE] =  {LCD_CONTROL_DATA};
    181            
    182            /* Set the cursor to the correct address */
    183            LCDCommand(LCD_ADDRESS_CMD | u8Address_);
   \   00000006   0xF054 0x0080      ORRS     R0,R4,#0x80
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       LCDCommand
    184            
    185            /* Fill the message characters with ' ' */
    186            for(u8Index = 0; u8Index < u8CharactersToClear_; u8Index++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??LCDClearChars_0: (+1)
   \   00000014   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xD206             BCS.N    ??LCDClearChars_1
    187            {
    188              au8LCDMessage[u8Index + 1] = ' ';
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x....             LDR.N    R1,??DataTable4_4
   \   00000020   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0x1871             ADDS     R1,R6,R1
   \   00000024   0x7048             STRB     R0,[R1, #+1]
    189            }
   \   00000026   0x1C76             ADDS     R6,R6,#+1
   \   00000028   0xE7F4             B.N      ??LCDClearChars_0
    190                
    191            /* Queue the message */
    192            TWI0WriteData(LCD_ADDRESS, u8CharactersToClear_ + 1, au8LCDMessage, STOP);
   \                     ??LCDClearChars_1: (+1)
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x....             LDR.N    R2,??DataTable4_4
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x1C69             ADDS     R1,R5,#+1
   \   00000032   0x203C             MOVS     R0,#+60
   \   00000034   0x.... 0x....      BL       TWI0WriteData
    193                	
    194          } /* end LCDClearChars() */
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .data, align 4
   \                     ??au8LCDMessage_1:
   \   00000000   0x40 0x00          DC8 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    195          
    196          
    197          /*--------------------------------------------------------------------------------------------------------------------*/
    198          /* Protected Functions */
    199          /*--------------------------------------------------------------------------------------------------------------------*/
    200          
    201          /*------------------------------------------------------------------------------
    202          Function: LcdInitialize
    203          
    204          Description:
    205          Initializes the LCD task and manually sends a message to the LCD
    206          
    207          Requires:
    208            - 
    209          
    210          Promises:
    211            - LCD task Setup and LCD functions can now be called
    212          */

   \                                 In section .text, align 2, keep-with-next
    213          void LcdInitialize(void)
    214          {
   \                     LcdInitialize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
    215            u8 au8Commands[] = 
    216            {
    217              LCD_FUNCTION_CMD, LCD_FUNCTION2_CMD, LCD_BIAS_CMD, 
    218              LCD_CONTRAST_CMD, LCD_DISPLAY_SET_CMD, LCD_FOLLOWER_CMD 
    219            };
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable4_5
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
    220                           /* "012345567890123456789" */
    221            u8 au8Welcome[] = "RAZOR SAM3U2 ASCII   ";
   \   00000010   0xA802             ADD      R0,SP,#+8
   \   00000012   0x....             LDR.N    R1,??DataTable4_6
   \   00000014   0x2216             MOVS     R2,#+22
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy
    222            
    223            /* State to Idle */
    224            Lcd_StateMachine = LcdSM_Idle;
   \   0000001A   0x.... 0x....      ADR.W    R0,LcdSM_Idle
   \   0000001E   0x....             LDR.N    R1,??DataTable4_7
   \   00000020   0x6008             STR      R0,[R1, #+0]
    225            
    226            /* Turn on LCD wait 40 ms for it to setup */
    227            AT91C_BASE_PIOB->PIO_SODR = PB_09_LCD_RST;
   \   00000022   0xF44F 0x7000      MOV      R0,#+512
   \   00000026   0x....             LDR.N    R1,??DataTable4_8  ;; 0x400e0e30
   \   00000028   0x6008             STR      R0,[R1, #+0]
    228            Lcd_u32Timer = G_u32SystemTime1ms;
   \   0000002A   0x....             LDR.N    R0,??DataTable4_9
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x....             LDR.N    R1,??DataTable4_10
   \   00000030   0x6008             STR      R0,[R1, #+0]
    229            while( !IsTimeUp(&Lcd_u32Timer, LCD_STARTUP_DELAY) );
   \                     ??LcdInitialize_0: (+1)
   \   00000032   0x2128             MOVS     R1,#+40
   \   00000034   0x....             LDR.N    R0,??DataTable4_10
   \   00000036   0x.... 0x....      BL       IsTimeUp
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD0F9             BEQ.N    ??LcdInitialize_0
    230            
    231            /* Send Control Command */
    232            TWI0WriteByte(LCD_ADDRESS, LCD_CONTROL_COMMAND, NO_STOP);
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x203C             MOVS     R0,#+60
   \   00000044   0x.... 0x....      BL       TWI0WriteByte
    233            
    234            /* Send Control Commands */
    235            TWI0WriteData(LCD_ADDRESS, NUM_CONTROL_CMD, &au8Commands[0], NO_STOP);
   \   00000048   0x2301             MOVS     R3,#+1
   \   0000004A   0xAA00             ADD      R2,SP,#+0
   \   0000004C   0x2106             MOVS     R1,#+6
   \   0000004E   0x203C             MOVS     R0,#+60
   \   00000050   0x.... 0x....      BL       TWI0WriteData
    236            
    237            /* Wait for 200 ms */
    238            Lcd_u32Timer = G_u32SystemTime1ms;
   \   00000054   0x....             LDR.N    R0,??DataTable4_9
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x....             LDR.N    R1,??DataTable4_10
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    239            while( !IsTimeUp(&Lcd_u32Timer, LCD_CONTROL_COMMAND_DELAY) );
   \                     ??LcdInitialize_1: (+1)
   \   0000005C   0x21C8             MOVS     R1,#+200
   \   0000005E   0x....             LDR.N    R0,??DataTable4_10
   \   00000060   0x.... 0x....      BL       IsTimeUp
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD0F9             BEQ.N    ??LcdInitialize_1
    240            
    241            /* Send Final Command to turn it on */
    242            TWI0WriteByte(LCD_ADDRESS, LCD_DISPLAY_CMD | LCD_DISPLAY_ON, STOP);
   \   00000068   0x2200             MOVS     R2,#+0
   \   0000006A   0x210C             MOVS     R1,#+12
   \   0000006C   0x203C             MOVS     R0,#+60
   \   0000006E   0x.... 0x....      BL       TWI0WriteByte
    243          
    244            /* Blacklight - White */
    245            LedOn(LCD_RED);
   \   00000072   0x2008             MOVS     R0,#+8
   \   00000074   0x.... 0x....      BL       LedOn
    246            LedOn(LCD_GREEN);
   \   00000078   0x2009             MOVS     R0,#+9
   \   0000007A   0x.... 0x....      BL       LedOn
    247            LedOn(LCD_BLUE);
   \   0000007E   0x200A             MOVS     R0,#+10
   \   00000080   0x.... 0x....      BL       LedOn
    248            
    249            TWI0WriteByte(LCD_ADDRESS, LCD_CONTROL_DATA, NO_STOP);
   \   00000084   0x2201             MOVS     R2,#+1
   \   00000086   0x2140             MOVS     R1,#+64
   \   00000088   0x203C             MOVS     R0,#+60
   \   0000008A   0x.... 0x....      BL       TWI0WriteByte
    250            TWI0WriteData(LCD_ADDRESS, 20, &au8Welcome[0], STOP);
   \   0000008E   0x2300             MOVS     R3,#+0
   \   00000090   0xAA02             ADD      R2,SP,#+8
   \   00000092   0x2114             MOVS     R1,#+20
   \   00000094   0x203C             MOVS     R0,#+60
   \   00000096   0x.... 0x....      BL       TWI0WriteData
    251             
    252            Lcd_u32Timer = G_u32SystemTime1ms;
   \   0000009A   0x....             LDR.N    R0,??DataTable4_9
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0x....             LDR.N    R1,??DataTable4_10
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    253            G_u32ApplicationFlags |= _APPLICATION_FLAGS_LCD;
   \   000000A2   0x....             LDR.N    R0,??DataTable4_11
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000AA   0x....             LDR.N    R1,??DataTable4_11
   \   000000AC   0x6008             STR      R0,[R1, #+0]
    254          
    255          } /* end LcdInitialize */
   \   000000AE   0xB009             ADD      SP,SP,#+36
   \   000000B0   0xBD00             POP      {PC}             ;; return
    256          
    257          
    258          /*----------------------------------------------------------------------------------------------------------------------
    259          Function LcdRunActiveState()
    260          
    261          Description:
    262          Selects and runs one iteration of the current state in the state machine.
    263          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    264          may take 1ms / n to execute.
    265          
    266          Requires:
    267            - State machine function pointer points at current state
    268          
    269          Promises:
    270            - Calls the function to pointed by the state machine function pointer
    271          */

   \                                 In section .text, align 2, keep-with-next
    272          void LcdRunActiveState(void)
    273          {
   \                     LcdRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    274            Lcd_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable4_7
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    275          
    276          } /* end LcdRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    277          
    278          
    279          /***********************************************************************************************************************
    280          State Machine Function Declarations
    281          ***********************************************************************************************************************/
    282          
    283          /*------------------------------------------------------------------------------
    284          Function: LcdSM_Idle
    285          
    286          Description:
    287          Placeholder for some fancier functionality to come later.
    288          
    289          Requires:
    290            - LCD is initialized
    291          
    292          Promises:
    293            - 
    294          */

   \                                 In section .text, align 4, keep-with-next
    295          void LcdSM_Idle(void)
    296          {
    297            
    298          }
   \                     LcdSM_Idle: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ??au8LCDWriteCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     G_u32SystemFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ??au8LCDMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ??au8LCDMessage_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     Lcd_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x400E0E30         DC32     0x400e0e30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     Lcd_u32Timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     G_u32ApplicationFlags

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x38 0x39          DC8 56, 57, 20, 114, 94, 109, 0, 0
   \              0x14 0x72    
   \              0x5E 0x6D    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x52 0x41          DC8 "RAZOR SAM3U2 ASCII   "
   \              0x5A 0x4F    
   \              0x52 0x20    
   \              0x53 0x41    
   \              0x4D 0x33    
   \              0x55 0x32    
   \              0x20 0x41    
   \              0x53 0x43    
   \              0x49 0x49    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   LCDClearChars
        16   -> LCDCommand
        16   -> TWI0WriteData
       8   LCDCommand
         8   -> TWI0WriteData
      16   LCDMessage
        16   -> LCDCommand
        16   -> TWI0WriteData
      40   LcdInitialize
        40   -> IsTimeUp
        40   -> LedOn
        40   -> TWI0WriteByte
        40   -> TWI0WriteData
        40   -> __aeabi_memcpy
       8   LcdRunActiveState
         8   -- Indirect call
       0   LcdSM_Idle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       8  ?_0
      24  ?_1
      58  LCDClearChars
      42  LCDCommand
      56  LCDMessage
     178  LcdInitialize
      10  LcdRunActiveState
       2  LcdSM_Idle
       4  Lcd_StateMachine
       4  Lcd_u32Timer
      44  au8LCDMessage
      44  au8LCDMessage
       2  au8LCDWriteCommand

 
  10 bytes in section .bss
  88 bytes in section .data
  32 bytes in section .rodata
 394 bytes in section .text
 
 394 bytes of CODE  memory
  32 bytes of CONST memory
  98 bytes of DATA  memory

Errors: none
Warnings: none
