###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        14/May/2017  11:28:14
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\board_cstartup_iar.c
#    Command line =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\board_cstartup_iar.c
#        -D MPGL1 -D MPG1 -D EIE1 --preprocess=cl
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\ -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\board_cstartup_iar.lst
#    Object file  =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\Obj\board_cstartup_iar.o
#
###############################################################################

D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\board_cstartup_iar.c
      1          /* ----------------------------------------------------------------------------
      2          *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          #include "configuration.h"
     31          
     32          
     33          
     34          //------------------------------------------------------------------------------
     35          //         Types
     36          //------------------------------------------------------------------------------
     37          typedef union { IntFunc __fun; void * __ptr; } IntVector;
     38          
     39          //------------------------------------------------------------------------------
     40          //         ProtoTypes
     41          //------------------------------------------------------------------------------
     42          
     43          extern void __iar_program_start( void );
     44          
     45          int __low_level_init( void );
     46          
     47          //------------------------------------------------------------------------------
     48          //         Variables
     49          //------------------------------------------------------------------------------
     50          extern unsigned int __ICFEDIT_vector_start__;
     51          
     52          //------------------------------------------------------------------------------
     53          //         Exception Table
     54          //------------------------------------------------------------------------------
     55          
     56          #pragma language=extended
     57          #pragma segment="CSTACK"
     58          
     59          // The name "__vector_table" has special meaning for C-SPY:
     60          // it is where the SP start value is found, and the NVIC vector
     61          // table register (VTOR) is initialized to this address if != 0.
     62          
     63          #pragma section  = ".intvec"
     64          #pragma location = ".intvec"

   \                                 In section .intvec, align 4
     65          const IntVector __vector_table[] =
   \                     __vector_table:
   \   00000000   0x........         DC32 SFE(CSTACK), __iar_program_start, NMI_Handler, HardFault_Handler
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 MemManage_Handler, BusFault_Handler, UsageFault_Handler, 0H, 0H
   \              0x........   
   \              0x........   
   \              0x00000000   
   \              0x00000000   
   \   00000024   0x00000000         DC32 0H, 0H, SVC_Handler, DebugMon_Handler, 0H, PendSV_Handler
   \              0x00000000   
   \              0x........   
   \              0x........   
   \              0x00000000   
   \              0x........   
   \   0000003C   0x........         DC32 SysTick_Handler, SUPC_IrqHandler, RSTC_IrqHandler, RTC_IrqHandler
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000004C   0x........         DC32 RTT_IrqHandler, WDT_IrqHandler, PMC_IrqHandler, EFC0_IrqHandler
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000005C   0x........         DC32 EFC1_IrqHandler, DBGU_IrqHandler, HSMC4_IrqHandler
   \              0x........   
   \              0x........   
   \   00000068   0x........         DC32 PIOA_IrqHandler, PIOB_IrqHandler, PIOC_IrqHandler
   \              0x........   
   \              0x........   
   \   00000074   0x........         DC32 USART0_IrqHandler, USART1_IrqHandler, USART2_IrqHandler
   \              0x........   
   \              0x........   
   \   00000080   0x........         DC32 USART3_IrqHandler, MCI0_IrqHandler, TWI0_IrqHandler
   \              0x........   
   \              0x........   
   \   0000008C   0x........         DC32 TWI1_IrqHandler, SPI0_IrqHandler, SSC0_IrqHandler, TC0_IrqHandler
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000009C   0x........         DC32 TC1_IrqHandler, TC2_IrqHandler, PWM_IrqHandler, ADCC0_IrqHandler
   \              0x........   
   \              0x........   
   \              0x........   
   \   000000AC   0x........         DC32 ADCC1_IrqHandler, HDMA_IrqHandler, UDPD_IrqHandler
   \              0x........   
   \              0x........   
   \   000000B8   0x........         DC32 IrqHandlerNotUsed
     66          {
     67              { .__ptr = __sfe( "CSTACK" ) },
     68              __iar_program_start,
     69          
     70              NMI_Handler,
     71              HardFault_Handler,
     72              MemManage_Handler,
     73              BusFault_Handler,
     74              UsageFault_Handler,
     75              0, 0, 0, 0,             // Reserved
     76              SVC_Handler,
     77              DebugMon_Handler,
     78              0,                      // Reserved
     79              PendSV_Handler,
     80              SysTick_Handler,
     81          
     82              // Configurable interrupts
     83              SUPC_IrqHandler,    // 0  SUPPLY CONTROLLER
     84              RSTC_IrqHandler,    // 1  RESET CONTROLLER
     85              RTC_IrqHandler,     // 2  REAL TIME CLOCK
     86              RTT_IrqHandler,     // 3  REAL TIME TIMER
     87              WDT_IrqHandler,     // 4  WATCHDOG TIMER
     88              PMC_IrqHandler,     // 5  PMC
     89              EFC0_IrqHandler,    // 6  EFC0
     90              EFC1_IrqHandler,    // 7  EFC1
     91              DBGU_IrqHandler,    // 8  DBGU
     92              HSMC4_IrqHandler,   // 9  HSMC4
     93              PIOA_IrqHandler,    // 10 Parallel IO Controller A
     94              PIOB_IrqHandler,    // 11 Parallel IO Controller B
     95              PIOC_IrqHandler,    // 12 Parallel IO Controller C
     96              USART0_IrqHandler,  // 13 USART 0
     97              USART1_IrqHandler,  // 14 USART 1
     98              USART2_IrqHandler,  // 15 USART 2
     99              USART3_IrqHandler,  // 16 USART 3
    100              MCI0_IrqHandler,    // 17 Multimedia Card Interface
    101              TWI0_IrqHandler,    // 18 TWI 0
    102              TWI1_IrqHandler,    // 19 TWI 1
    103              SPI0_IrqHandler,    // 20 Serial Peripheral Interface
    104              SSC0_IrqHandler,    // 21 Serial Synchronous Controller 0
    105              TC0_IrqHandler,     // 22 Timer Counter 0
    106              TC1_IrqHandler,     // 23 Timer Counter 1
    107              TC2_IrqHandler,     // 24 Timer Counter 2
    108              PWM_IrqHandler,     // 25 Pulse Width Modulation Controller
    109              ADCC0_IrqHandler,   // 26 ADC controller0
    110              ADCC1_IrqHandler,   // 27 ADC controller1
    111              HDMA_IrqHandler,    // 28 HDMA
    112              UDPD_IrqHandler,   // 29 USB Device High Speed UDP_HS
    113              IrqHandlerNotUsed   // 30 not used
    114          };
    115          
    116          //------------------------------------------------------------------------------
    117          //         Exported functions
    118          //------------------------------------------------------------------------------
    119          
    120          //------------------------------------------------------------------------------
    121          /// This is the code that gets called on processor reset. To initialize the
    122          /// device.
    123          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    124          int __low_level_init( void )
    125          {
    126              unsigned int * src = __section_begin(".intvec");
   \                     __low_level_init: (+1)
   \   00000000   0x4902             LDR.N    R1,??__low_level_init_0
    127          
    128              AT91C_BASE_NVIC->NVIC_VTOFFR = ((unsigned int)(src)) | (0x0 << 7);
   \   00000002   0x4803             LDR.N    R0,??__low_level_init_0+0x4  ;; 0xe000ed08
   \   00000004   0x6001             STR      R1,[R0, #+0]
    129              
    130              return 1; // if return 0, the data sections will not be initialized.
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4770             BX       LR               ;; return
   \   0000000A   0xBF00             Nop      
   \                     ??__low_level_init_0:
   \   0000000C   0x........         DC32     SFB(`.intvec`)
   \   00000010   0xE000ED08         DC32     0xe000ed08
    131          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   __low_level_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  __low_level_init
     188  __vector_table

 
 188 bytes in section .intvec
  20 bytes in section .text
 
  20 bytes of CODE  memory
 188 bytes of CONST memory

Errors: none
Warnings: none
