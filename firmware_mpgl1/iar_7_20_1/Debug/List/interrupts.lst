###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        14/May/2017  11:28:16
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\drivers\interrupts.c
#    Command line =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\drivers\interrupts.c
#        -D MPGL1 -D MPG1 -D EIE1 --preprocess=cl
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\ -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\interrupts.lst
#    Object file  =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\Obj\interrupts.o
#
###############################################################################

D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\drivers\interrupts.c
      1          /**********************************************************************************************************************
      2          File: interrupts.c                                                               
      3          
      4          Description:
      5          Interrupt definitions for use with LED sign controller firmware.
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable5  ;; 0xe000e180
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_ClearPendingIRQ(IRQn_Type)
   \                     NVIC_ClearPendingIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable5_1  ;; 0xe000e280
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */
     15          
     16          
     17          /*--------------------------------------------------------------------------------------------------------------------*/
     18          /* Existing variables (defined in other files -- should all contain the "extern" keyword)  */
     19          extern volatile u32 G_u32SystemTime1ms;                            /* From board-specific source file */
     20          extern volatile u32 G_u32SystemTime1s;                             /* From board-specific source file */
     21          
     22          extern volatile u32 G_u32SystemFlags;                              /* From main.c       */
     23          
     24          extern volatile bool G_abButtonDebounceActive[TOTAL_BUTTONS];      /* From buttons.c    */
     25          extern volatile u32 G_au32ButtonDebounceTimeStart[TOTAL_BUTTONS];  /* From buttons.c    */
     26          
     27          
     28          /***********************************************************************************************************************
     29          Global variable definitions with scope limited to this local application.
     30          Variables names shall start with "ISR_" and be declared as static.
     31          ***********************************************************************************************************************/
     32          
     33          
     34          /**********************************************************************************************************************
     35          Interrupt Service Routine Definitions
     36          ***********************************************************************************************************************/
     37          
     38          /*----------------------------------------------------------------------------------------------------------------------
     39          Function: InterruptSetup
     40          
     41          Description:
     42          Sets up interrupt priorities in the NVIC and enables required interrupts.
     43          Note that other interrupt sources may be enabled outside of this function.
     44          
     45          Requires:
     46            - All peripherals for which interrupts are enabled here should be configured
     47          
     48          Promises:
     49            - Interrupt priorities are set 
     50          */

   \                                 In section .text, align 2, keep-with-next
     51          void InterruptSetup(void)
     52          {
   \                     InterruptSetup: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
     53            u32 au32PriorityConfig[PRIORITY_REGISTERS] = {IPR0_INIT, IPR1_INIT, IPR2_INIT, IPR3_INIT, IPR4_INIT,
     54                                                          IPR5_INIT, IPR6_INIT, IPR7_INIT};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable5_2
   \   00000008   0x2220             MOVS     R2,#+32
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
     55            
     56            /* Set interrupt priorities */
     57            for(u8 i = 0; i < PRIORITY_REGISTERS; i++)
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??InterruptSetup_0: (+1)
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x2808             CMP      R0,#+8
   \   00000014   0xDA09             BGE.N    ??InterruptSetup_1
     58            {
     59              ((u32*)(AT91C_BASE_NVIC->NVIC_IPR))[i] = au32PriorityConfig[i];
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000001E   0x....             LDR.N    R2,??DataTable5_3  ;; 0xe000e400
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
     60            }
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0xE7F2             B.N      ??InterruptSetup_0
     61            
     62            /* Disable all interrupts and ensure pending bits are clear */
     63            for(u8 i = 0; i < SAM3U2_INTERRUPT_SOURCES; i++)
   \                     ??InterruptSetup_1: (+1)
   \   0000002A   0x2400             MOVS     R4,#+0
   \                     ??InterruptSetup_2: (+1)
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C1D             CMP      R4,#+29
   \   00000030   0xDA09             BGE.N    ??InterruptSetup_3
     64            {
     65              NVIC_DisableIRQ( (IRQn_Type)i );
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000036   0x.... 0x....      BL       NVIC_DisableIRQ
     66              NVIC_ClearPendingIRQ( (IRQn_Type) i);
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000003E   0x.... 0x....      BL       NVIC_ClearPendingIRQ
     67            } 
   \   00000042   0x1C64             ADDS     R4,R4,#+1
   \   00000044   0xE7F2             B.N      ??InterruptSetup_2
     68              
     69          } /* end InterruptSetup(void) */
   \                     ??InterruptSetup_3: (+1)
   \   00000046   0xB008             ADD      SP,SP,#+32
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
     70          
     71          
     72          /*----------------------------------------------------------------------------------------------------------------------
     73          ISR: HardFault_Handler
     74          
     75          Description:
     76          A non-maskable (always available) core interrupt that occurs when something extraordinary
     77          event.  In many cases, this is referencing an invalid address, but can be other events
     78          of various levels of mystery.  
     79          
     80          Requires:
     81            -
     82          
     83          Promises:
     84            - Red LED is on, all others off
     85            - Code held
     86          */

   \                                 In section .text, align 2, keep-with-next
     87          void HardFault_Handler(void)
     88          {
   \                     HardFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     89          #ifdef MPGL1
     90            LedOff(WHITE);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       LedOff
     91            LedOff(CYAN);
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x.... 0x....      BL       LedOff
     92            LedOff(PURPLE);
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       LedOff
     93            LedOff(ORANGE);
   \   00000014   0x2006             MOVS     R0,#+6
   \   00000016   0x.... 0x....      BL       LedOff
     94            LedOff(BLUE);
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       LedOff
     95            LedOff(GREEN);
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x.... 0x....      BL       LedOff
     96            LedOff(YELLOW);
   \   00000026   0x2005             MOVS     R0,#+5
   \   00000028   0x.... 0x....      BL       LedOff
     97            LedOn(RED);
   \   0000002C   0x2007             MOVS     R0,#+7
   \   0000002E   0x.... 0x....      BL       LedOn
     98          #endif /* MPGL1 */
     99          
    100            
    101          #ifdef MPGL2
    102          #ifdef MPGL2_R01  
    103            LedOff(BLUE);
    104            LedOff(GREEN);
    105            LedOff(YELLOW);
    106            LedOn(RED);
    107          #else
    108            LedOff(BLUE0);
    109            LedOff(BLUE1);
    110            LedOff(BLUE2);
    111            LedOff(BLUE3);
    112            LedOff(GREEN0);
    113            LedOff(GREEN1);
    114            LedOff(GREEN2);
    115            LedOff(GREEN3);
    116            LedOff(RED1);
    117            LedOff(RED2);
    118            LedOff(RED3);
    119            
    120            LedOn(RED0);
    121          #endif /* MPGL2_R01 */
    122          #endif /* MPGL2 */
    123          
    124            while(1);  /* !!!!! update to log and/or report error and/or restart */
   \                     ??HardFault_Handler_0: (+1)
   \   00000032   0xE7FE             B.N      ??HardFault_Handler_0
    125            
    126          } /* end HardFault_Handler() */
    127          
    128          
    129          /*----------------------------------------------------------------------------------------------------------------------
    130          ISR: SysTick_Handler
    131          
    132          Description:
    133          Updates the global ms timer.  This interrupt is always enabled and running in 
    134          the system and is essential for system timing and sleep wakeup.
    135          This ISR should be as fast as possible!
    136          
    137          Requires:
    138          
    139          Promises:
    140            - G_u32SystemTime1ms counter is incremented by 1
    141            - System tick interrupt pending flag is cleared
    142          */

   \                                 In section .text, align 2, keep-with-next
    143          void SysTick_Handler(void)
    144          {
    145            static u16 u16SecondCounter = 1000;
    146            
    147            /* Update the 1ms system timer and clear sleep flag */
    148            G_u32SystemTime1ms++;
   \                     SysTick_Handler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable5_4
   \   00000008   0x6008             STR      R0,[R1, #+0]
    149            G_u32SystemFlags &= ~_SYSTEM_SLEEPING;
   \   0000000A   0x....             LDR.N    R0,??DataTable5_5
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF030 0x4080      BICS     R0,R0,#0x40000000
   \   00000012   0x....             LDR.N    R1,??DataTable5_5
   \   00000014   0x6008             STR      R0,[R1, #+0]
    150          
    151            /* Update the 1 second timer if required */
    152            if(--u16SecondCounter == 0)
   \   00000016   0x....             LDR.N    R0,??DataTable5_6
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable5_6
   \   0000001E   0x8008             STRH     R0,[R1, #+0]
   \   00000020   0x....             LDR.N    R0,??DataTable5_6
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD108             BNE.N    ??SysTick_Handler_0
    153            {
    154              u16SecondCounter = 1000;
   \   00000028   0xF44F 0x707A      MOV      R0,#+1000
   \   0000002C   0x....             LDR.N    R1,??DataTable5_6
   \   0000002E   0x8008             STRH     R0,[R1, #+0]
    155              G_u32SystemTime1s++;
   \   00000030   0x....             LDR.N    R0,??DataTable5_7
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x....             LDR.N    R1,??DataTable5_7
   \   00000038   0x6008             STR      R0,[R1, #+0]
    156            }
    157              
    158          } /* end SysTickHandler(void) */
   \                     ??SysTick_Handler_0: (+1)
   \   0000003A   0x4770             BX       LR               ;; return

   \                                 In section .data, align 2
   \                     ??u16SecondCounter:
   \   00000000   0x03E8             DC16 1000
    159          
    160          
    161          /*----------------------------------------------------------------------------------------------------------------------
    162          ISR: PIOA_IrqHandler
    163          
    164          Description:
    165          Parses the PORTA GPIO interrupts and handles them appropriately.  Note that all PORTA GPIO
    166          interrupts are ORed and will trigger this handler, therefore any expected interrupt that is enabled
    167          must be parsed out and handled.
    168          
    169          Requires:
    170            - The button IO bits match the interrupt flag locations
    171          
    172          Promises:
    173            - Buttons: sets the active button's debouncing flag, clears the interrupt
    174              and initializes the button's debounce timer.
    175          */

   \                                 In section .text, align 2, keep-with-next
    176          void PIOA_IrqHandler(void)
    177          {
   \                     PIOA_IrqHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    178            u32 u32GPIOInterruptSources, u32ButtonInterrupts, u32CurrentButtonLocation;
    179          
    180            /* Grab a snapshot of the current PORTA status flags (clears all flags) */
    181            u32GPIOInterruptSources  = AT91C_BASE_PIOA->PIO_ISR;
   \   00000002   0x....             LDR.N    R0,??DataTable5_8  ;; 0x400e0c4c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0004             MOVS     R4,R0
    182          
    183            /******** DO NOT set a breakpoint before this line of the ISR because the debugger
    184            will "read" PIO_ISR and clear the flags. ******/
    185            
    186            /* Examine button interrupts */
    187            u32ButtonInterrupts = u32GPIOInterruptSources & GPIOA_BUTTONS;
   \   00000008   0xF414 0x3000      ANDS     R0,R4,#0x20000
   \   0000000C   0x0005             MOVS     R5,R0
    188            
    189            /* Check if any port A buttons interrupted */
    190            if(u32ButtonInterrupts)
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD01C             BEQ.N    ??PIOA_IrqHandler_0
    191            {
    192              /* Parse through all the buttons to find those that have interrupted */
    193              for(u8 i = 0; i < TOTAL_BUTTONS; i++)
   \   00000012   0x2700             MOVS     R7,#+0
   \                     ??PIOA_IrqHandler_1: (+1)
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0x2F04             CMP      R7,#+4
   \   00000018   0xDA18             BGE.N    ??PIOA_IrqHandler_0
    194              {
    195                /* Get the bit position of the current button and mask against set interrupts */  
    196                u32CurrentButtonLocation = GetButtonBitLocation(i, BUTTON_PORTA);
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x0038             MOVS     R0,R7
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       GetButtonBitLocation
   \   00000024   0x0006             MOVS     R6,R0
    197                if(u32ButtonInterrupts & u32CurrentButtonLocation)
   \   00000026   0x4235             TST      R5,R6
   \   00000028   0xD00E             BEQ.N    ??PIOA_IrqHandler_2
    198                {
    199                  /* Button has interrupted: disable the button's interrupt and start the button's debounce timer */ 
    200                  AT91C_BASE_PIOA->PIO_IDR |= u32CurrentButtonLocation;
   \   0000002A   0x....             LDR.N    R0,??DataTable5_9  ;; 0x400e0c44
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x4330             ORRS     R0,R6,R0
   \   00000030   0x....             LDR.N    R1,??DataTable5_9  ;; 0x400e0c44
   \   00000032   0x6008             STR      R0,[R1, #+0]
    201          
    202                  /* Initialize the button's debouncing information */
    203                  G_abButtonDebounceActive[i] = TRUE;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x....             LDR.N    R1,??DataTable5_10
   \   00000038   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003A   0x5478             STRB     R0,[R7, R1]
    204                  G_au32ButtonDebounceTimeStart[i] = G_u32SystemTime1ms;
   \   0000003C   0x....             LDR.N    R0,??DataTable5_4
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x....             LDR.N    R1,??DataTable5_11
   \   00000042   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000044   0xF841 0x0027      STR      R0,[R1, R7, LSL #+2]
    205                }
    206              }
   \                     ??PIOA_IrqHandler_2: (+1)
   \   00000048   0x1C7F             ADDS     R7,R7,#+1
   \   0000004A   0xE7E3             B.N      ??PIOA_IrqHandler_1
    207            } /* end button interrupt checking */
    208            
    209            /* Clear the PIOA pending flag and exit */
    210            NVIC_ClearPendingIRQ(IRQn_PIOA);
   \                     ??PIOA_IrqHandler_0: (+1)
   \   0000004C   0x200A             MOVS     R0,#+10
   \   0000004E   0x.... 0x....      BL       NVIC_ClearPendingIRQ
    211            
    212          } /* end PIOA_IrqHandler() */
   \   00000052   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    213          
    214          
    215          /*----------------------------------------------------------------------------------------------------------------------
    216          ISR: PIOB_IrqHandler
    217          
    218          Description:
    219          Parses the PORTB GPIO interrupts and handles them appropriately.  Note that all PORTB GPIO
    220          interrupts are ORed and will trigger this handler, therefore any expected interrupt that is enabled
    221          must be parsed out and handled.
    222          
    223          Requires:
    224            - The button IO bits match the interrupt flag locations
    225          
    226          Promises:
    227            - Buttons: sets the active button's debouncing flag, clears the interrupt
    228              and initializes the button's debounce timer.
    229          */

   \                                 In section .text, align 2, keep-with-next
    230          void PIOB_IrqHandler(void)
    231          {
   \                     PIOB_IrqHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    232            u32 u32GPIOInterruptSources;
    233            u32 u32ButtonInterrupts, u32CurrentButtonLocation;
    234          
    235            /* Grab a snapshot of the current PORTB status flags (clears all flags) */
    236            u32GPIOInterruptSources  = AT91C_BASE_PIOB->PIO_ISR;
   \   00000002   0x....             LDR.N    R0,??DataTable5_12  ;; 0x400e0e4c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0004             MOVS     R4,R0
    237          
    238            /******** DO NOT set a breakpoint before this line of the ISR because the debugger
    239            will "read" PIO_ISR and clear the flags. ******/
    240            
    241            /* Parse interrupts */
    242            u32ButtonInterrupts = u32GPIOInterruptSources & GPIOB_BUTTONS;
   \   00000008   0xF014 0x0007      ANDS     R0,R4,#0x7
   \   0000000C   0x0005             MOVS     R5,R0
    243            
    244            /* Check if any port B buttons interrupted */
    245            if(u32ButtonInterrupts)
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD01C             BEQ.N    ??PIOB_IrqHandler_0
    246            {
    247              /* Parse through all the buttons to find those that have interrupted */
    248              for(u8 i = 0; i < TOTAL_BUTTONS; i++)
   \   00000012   0x2700             MOVS     R7,#+0
   \                     ??PIOB_IrqHandler_1: (+1)
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0x2F04             CMP      R7,#+4
   \   00000018   0xDA18             BGE.N    ??PIOB_IrqHandler_0
    249              {
    250                /* Get the bit position of the current button and mask against set interrupts */  
    251                u32CurrentButtonLocation = GetButtonBitLocation(i, BUTTON_PORTB);
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x0038             MOVS     R0,R7
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       GetButtonBitLocation
   \   00000024   0x0006             MOVS     R6,R0
    252                if(u32ButtonInterrupts & u32CurrentButtonLocation)
   \   00000026   0x4235             TST      R5,R6
   \   00000028   0xD00E             BEQ.N    ??PIOB_IrqHandler_2
    253                {
    254                  /* Button has interrupted: disable the button's interrupt and start the button's debounce timer */ 
    255                  AT91C_BASE_PIOB->PIO_IDR |= u32CurrentButtonLocation;
   \   0000002A   0x....             LDR.N    R0,??DataTable5_13  ;; 0x400e0e44
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x4330             ORRS     R0,R6,R0
   \   00000030   0x....             LDR.N    R1,??DataTable5_13  ;; 0x400e0e44
   \   00000032   0x6008             STR      R0,[R1, #+0]
    256          
    257                  /* Initialize the button's debouncing information */
    258                  G_abButtonDebounceActive[i] = TRUE;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x....             LDR.N    R1,??DataTable5_10
   \   00000038   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003A   0x5478             STRB     R0,[R7, R1]
    259                  G_au32ButtonDebounceTimeStart[i] = G_u32SystemTime1ms;
   \   0000003C   0x....             LDR.N    R0,??DataTable5_4
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x....             LDR.N    R1,??DataTable5_11
   \   00000042   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000044   0xF841 0x0027      STR      R0,[R1, R7, LSL #+2]
    260                }
    261              }
   \                     ??PIOB_IrqHandler_2: (+1)
   \   00000048   0x1C7F             ADDS     R7,R7,#+1
   \   0000004A   0xE7E3             B.N      ??PIOB_IrqHandler_1
    262            } /* end button interrupt checking */
    263          
    264            /* Clear the PIOB pending flag and exit */
    265            NVIC->ICPR[0] = (1 << IRQn_PIOB);
   \                     ??PIOB_IrqHandler_0: (+1)
   \   0000004C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000050   0x....             LDR.N    R1,??DataTable5_1  ;; 0xe000e280
   \   00000052   0x6008             STR      R0,[R1, #+0]
    266            
    267          } /* end PIOB_IrqHandler() */
   \   00000054   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     G_u32SystemFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     ??u16SecondCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     G_u32SystemTime1s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x400E0C4C         DC32     0x400e0c4c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x400E0C44         DC32     0x400e0c44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     G_abButtonDebounceActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     G_au32ButtonDebounceTimeStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x400E0E4C         DC32     0x400e0e4c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x400E0E44         DC32     0x400e0e44

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0xF0F000F0         DC32 4042260720, 4042321920, 1347481840, 4029689936, 4028690672
   \              0xF0F0F000   
   \              0x5050F0F0   
   \              0xF0303050   
   \              0xF020F0F0   
   \   00000014   0x4000F020         DC32 1073803296, 4042321984, 4336
   \              0xF0F0F040   
   \              0x000010F0   
    268          
    269          
    270          /*--------------------------------------------------------------------------------------------------------------------*/
    271          /* End of File */
    272          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HardFault_Handler
         8   -> LedOff
         8   -> LedOn
      40   InterruptSetup
        40   -> NVIC_ClearPendingIRQ
        40   -> NVIC_DisableIRQ
        40   -> __aeabi_memcpy4
       0   NVIC_ClearPendingIRQ
       0   NVIC_DisableIRQ
      24   PIOA_IrqHandler
        24   -> GetButtonBitLocation
        24   -> NVIC_ClearPendingIRQ
      24   PIOB_IrqHandler
        24   -> GetButtonBitLocation
       0   SysTick_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      32  ?_0
      52  HardFault_Handler
      74  InterruptSetup
      20  NVIC_ClearPendingIRQ
      20  NVIC_DisableIRQ
      84  PIOA_IrqHandler
      86  PIOB_IrqHandler
      60  SysTick_Handler
       2  u16SecondCounter

 
   2 bytes in section .data
  32 bytes in section .rodata
 452 bytes in section .text
 
 452 bytes of CODE  memory
  32 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none
